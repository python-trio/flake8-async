---
+++
@@ x,24 x,24 @@

 import trio

-with trio.move_on_after(10):  # error: 5, "trio", "move_on_after"
-    ...
+# error: 5, "trio", "move_on_after"
+...


 async def function_name():
     # fmt: off
-    async with trio.fail_after(10): ...; ...; ...  # error: 15, "trio", "fail_after"
+    ...; ...; ...  # error: 15, "trio", "fail_after"
     # fmt: on
-    async with trio.fail_after(10):  # error: 15, "trio", "fail_after"
-        ...
-    async with trio.fail_at(10):  # error: 15, "trio", "fail_at"
-        ...
-    async with trio.move_on_after(10):  # error: 15, "trio", "move_on_after"
-        ...
-    async with trio.move_on_at(10):  # error: 15, "trio", "move_on_at"
-        ...
-    async with trio.CancelScope(...):  # error: 15, "trio", "CancelScope"
-        ...
+    # error: 15, "trio", "fail_after"
+    ...
+    # error: 15, "trio", "fail_at"
+    ...
+    # error: 15, "trio", "move_on_after"
+    ...
+    # error: 15, "trio", "move_on_at"
+    ...
+    # error: 15, "trio", "CancelScope"
+    ...

     with trio.move_on_after(10):
         await trio.sleep(1)
@@ x,8 x,8 @@
     with open("filename") as _:
         ...

-    with trio.fail_after(10):  # error: 9, "trio", "fail_after"
-        ...
+    # error: 9, "trio", "fail_after"
+    ...

     send_channel, receive_channel = trio.open_memory_channel(0)
     async with trio.fail_after(10):
@@ x,22 x,22 @@
         async for _ in receive_channel:
             ...

-    async with trio.fail_after(10):  # error: 15, "trio", "fail_after"
-        for _ in receive_channel:
-            ...
+    # error: 15, "trio", "fail_after"
+    for _ in receive_channel:
+        ...

     # fix missed alarm when function is defined inside the with scope
-    with trio.move_on_after(10):  # error: 9, "trio", "move_on_after"
+    # error: 9, "trio", "move_on_after"
+
+    async def foo():
+        await trio.sleep(1)
+
+    # error: 9, "trio", "move_on_after"
+    if ...:

         async def foo():
-            await trio.sleep(1)
-
-    with trio.move_on_after(10):  # error: 9, "trio", "move_on_after"
-        if ...:
-
-            async def foo():
-                if ...:
-                    await trio.sleep(1)
+            if ...:
+                await trio.sleep(1)

     async with random_ignored_library.fail_after(10):
         ...
@@ x,18 x,18 @@
     with trio.fail_after(1):
         with trio.CancelScope():
             await trio.sleep_forever()
-        with trio.CancelScope():  # error: 13, "trio", "CancelScope"
-            ...
+        # error: 13, "trio", "CancelScope"
+        ...
         with trio.CancelScope():
             await trio.sleep_forever()
-        with trio.CancelScope():  # error: 13, "trio", "CancelScope"
-            ...
+        # error: 13, "trio", "CancelScope"
+        ...

-    with trio.fail_after(1):  # error: 9, "trio", "fail_after"
-        with trio.CancelScope():  # error: 13, "trio", "CancelScope"
-            ...
-        with trio.CancelScope():  # error: 13, "trio", "CancelScope"
-            ...
+    # error: 9, "trio", "fail_after"
+    # error: 13, "trio", "CancelScope"
+    ...
+    # error: 13, "trio", "CancelScope"
+    ...

     with trio.fail_after(1):
         with trio.CancelScope():
@@ x,12 x,12 @@
     # don't remove other scopes
     with contextlib.suppress(Exception):
         print("foo")
-    with trio.fail_after(1):  # error: 9, "trio", "fail_after"
-        with contextlib.suppress(Exception):
-            print("foo")
+    # error: 9, "trio", "fail_after"
     with contextlib.suppress(Exception):
-        with trio.fail_after(1):  # error: 13, "trio", "fail_after"
-            print("foo")
+        print("foo")
+    with contextlib.suppress(Exception):
+        # error: 13, "trio", "fail_after"
+        print("foo")

     with contextlib.suppress(Exception):
         with open("blah") as file:
